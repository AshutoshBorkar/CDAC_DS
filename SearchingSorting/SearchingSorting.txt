


			79
			|C
	---------------------------------
	|L				|R
	20				88
	|				|	
-------------------		----------------
|		|		|		|
10		25		82		90

	inOrder = LCR  -> 10 20 25   79  82 88 90
	preOrder = CLR -> 79[c] 20[c] 10 25   88[c] 82 90
	postOrder = LRC -> 10 25 20[c]  82 90 88[c]  79[c]



array : 10
array : 90
array : 50
array : 65
array : 20
array : 4
array : 60
------------------------------
Enter number to search : 65
				7	  / 2
		mid = length of the array / 2
		mid = 3
array : 4	0	
array : 10	1
array : 20	2
array : 50	3 <-- mid
array : 60	4
array : 65	5
array : 90	6
------------------------------------------

Bubble Sort
 |
weight -> light
	
		for(int x=0;x<array.length;x++) {
			for(int y=x+1;y<array.length;y++) {
					4   > 60
				if(array[x] > array[y]) {
					int temp;
					temp = array[x];
					array[x] = array[y];
					array[y]=temp;
				}
			}
		}
		     y	
		     |               	
		0    1   2   3   4  5   6
		4   90  50  65  20  10  60
		         ------
		
		

		        y	
		        |	
		0   1   2   3   4  5  6
		4  90  50  65  20  10 60
		   |
		   x


			        y	
		                |	
		0   1   2   3   4  5  6
		4  50  90  65  20   10 60
		   |
		   x
				

			             y	
		                     |	
		0   1   2   3   4    5  6
		4  20  90  65   50   10 60
		   |
		   x

			             y	
		                     |	
		0   1   2   3   4    5  6
		4  10  90  65   50   20 60
		   |
		   x



			    y	
		            |	
		0   1   2   3   4    5  6
		4  10  90  65   50   20 60
		        |
		        x


			         y	
		                 |	
		0   1   2   3    4    5  6
		4  10  65   90   50   20 60
		        |
		        x


			              y	
		                      |	
		0   1   2   3    4    5  6
		4  10  50   90   65   20 60
		        |
		        x


			              y	
		                      |	
		0   1   2   3    4    5  6
		4  10  20   90   65   50 60
		        |
		        x

				 y	
		                 |	
		0   1   2   3    4    5  6
		4  10  20   90   65   50 60
		            |
		            x

				 y	
		                 |	
		0   1   2   3    4    5  6
		4  10  20   65   90   50 60
		            |
		            x


				      y	
		                      |	
		0   1   2   3    4    5  6
		4  10  20   50   90   65 60
		            |
		            x

				      y	
		                      |	
		0   1   2   3    4    5  6
		4  10  20   50   90   65 60
		                 |
		                 x

				      y	
		                      |	
		0   1   2   3    4    5  6
		4  10  20   50   65   90 60
		                 |
		                 x


				         y	
		                         |	
		0   1   2   3    4    5  6
		4  10  20   50   60   90 65
		                 |
		                 x


					 y	
		                         |	
		0   1   2   3    4    5  6
		4  10  20   50   60   90 65
		                      |
		                      x

					 y	
		                         |	
		0   1   2   3    4    5  6
		4  10  20   50   60   65 90
		                      |
		                      x

	Quick Sort 
		- Divide and Conquer and Combine
	* Algorithm
	quickSort(array, startPos, endPos)
	  - if(startPos<endPos)
		p = doPartition(array, startPos, endPos)
	  - quickSort(array, startPos, p-1)
	  - quickSort(array, p+1,   endPos)
	-------------------------------------------------	
	** Partition Algorithm
	pivot = array [ end Pos ]
	i = startPos-1
	for j=startPos to endPos -1 {
		if ( array [ j ] < pivot ) {i=i+1
			swap array[i] with array[j] }}
	swap array[i+1] with array[endPos]
	return i+1;
















